# -*- coding: utf-8 -*-
"""Pandas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tpe9vOqRiOLKOug0FoASiSAN_R3QnPTG

# Getting Started with pandas
"""

A=str(input(n))
final=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','0','1','2','3','4','5','6','7','8','9','+','/']
def final(n):
  for i in n:
    if (i.isalpha()==False and i.isnumeric()==False) and (i!="/" and i!="+"):
      return False
    return True
S=""
if final(st)==False:
    print(-1)
else:
    for i in A:
        asi=ord(i)
        S+=str(format(asi,'08b'))
N=""
l=[]
i=0
if len(S)%6!=0:
    while len(S)%6!=0:
        S+="0"
while i<len(S):
    de=(S[i:i+6])
    i+=6
    l.append(int(de,2))
for i in l:
    N+=final[i]
print(N)

# Python program for implementation of Bubble Sort

 

def bubbleSort(arr): 

    n = len(arr) 

 

    # Traverse through all array elements 

    for i in range(n-1): 

    # range(n) also work but outer loop will 

    # repeat one time more than needed. 

 

        # Last i elements are already in place 

        for j in range(0, n-i-1): 

 

            # traverse the array from 0 to n-i-1 

            # Swap if the element found is greater 

            # than the next element 

            if arr[j] > arr[j + 1] : 

                arr[j], arr[j + 1] = arr[j + 1], arr[j] 

 

# Driver code to test above

arr = [64, 34, 25, 12, 22, 11, 90] 

 

bubbleSort(arr)

 

print ("Sorted array is:") 

for i in range(len(arr)): 

    print ("% d" % arr[i],end=" ")

import pandas as pd

from pandas import Series, DataFrame

import numpy as np
np.random.seed(12345)
import matplotlib.pyplot as plt
plt.rc('figure', figsize=(10, 6))
PREVIOUS_MAX_ROWS = pd.options.display.max_rows
pd.options.display.max_rows = 20
np.set_printoptions(precision=4, suppress=True)

"""## Introduction to pandas Data Structures

### Series
"""

obj = pd.Series([4, 7, -5, 3])
obj

obj.values
obj.index  # like range(4)

obj2 = pd.Series([4, 7, -5, 3], index=['d','b', 'a', 'c'])
obj2
obj2.index

print(obj2['a'])
obj2['d'] = 6
print(obj2[['c', 'a', 'd']])

obj2[obj2 > 0]
print(obj2 * 2)
pd.exp(obj2)

print('b' in obj2)
print('e' in obj2)

sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}
obj3 = pd.Series(sdata)
obj3

states = ['California', 'Ohio', 'Oregon', 'Texas']
obj4 = pd.Series(sdata, index=states)
obj4

print(pd.isnull(obj4))
print(pd.notnull(obj4))



obj3 
obj4
obj3 + obj4

obj4.name = 'population'
obj4.index.name = 'state'
obj4

obj2
obj2.index = ['Bob', 'Steve', 'Jeff', 'Ryan']
obj2

"""### DataFrame"""

import pandas as pd
data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],
        'year': [2000, 2001, 2002, 2001, 2002, 2003],
        'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}
frame = pd.DataFrame(data)

frame

frame.head(n=4)

pd.DataFrame(data, columns=['year', 'state', 'pop'])

frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'],
                      index=['one', 'two', 'three', 'four',
                             'five', 'six'])
frame2
frame2.columns
print(frame2)

frame2

frame2[['year','pop']]
frame2.year

frame2.loc['three']

frame2['debt'] = 16.5
frame2
print(frame2)
frame2['debt'] = np.arange(6.)
print(frame2)

frame2

val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five'])
frame2['debt'] = val
frame2

frame2['eastern'] = frame2.state == 'Ohio'
frame2

del frame2['eastern']
frame2.columns

pop = {'Nevada': {2001: 2.4, 2002: 2.9},
       'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}

frame3 = pd.DataFrame(pop)
frame3

frame3.T

pd.DataFrame(pop, index=[2000, 2001, 2002, 2003])

print(frame3['Ohio'][:-1])

pdata = ( frame3['Ohio'][:-1],
          frame3['Nevada'][:2])
pd.DataFrame(pdata)

frame3.index.name = 'year'; frame3.columns.name = 'state'
frame3

frame3.values

frame2.values

"""### Index Objects"""

obj = pd.Series(range(3), index=['a', 'b', 'c'])
index = obj.index
index
index[1:]

"""index[1] = 'd'  # TypeError"""

import pandas as pd
labels = pd.Index(np.arange(3))
print(labels)
obj2 = pd.Series([1.5, -2.5, 0], index=labels)
print(obj2)
obj2.index is labels

frame3
frame3.columns
'Ohio' in frame3.columns
2003 in frame3.index

dup_labels = pd.Index(['foo', 'foo', 'bar', 'bar'])
dup_labels

from google.colab import drive
drive.mount('/content/drive')

"""## Essential Functionality

### Reindexing
"""

obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])
obj

obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])
obj2

obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])
print(obj3)
obj3.reindex(range(6), method='ffill')

frame = pd.DataFrame(np.arange(9).reshape((3, 3)),
                     index=['a', 'c', 'd'],
                     columns=['Ohio', 'Texas', 'California'])
print(frame)
frame2 = frame.reindex(['a', 'b', 'c', 'd'])
frame2

states = ['Texas', 'Utah', 'California']
frame.reindex(columns=states)

frame.loc[['a', 'b', 'c', 'd'], states]

"""### Dropping Entries from an Axis"""

obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])
obj
new_obj = obj.drop('c')
new_obj
obj.drop(['d', 'c'])

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
data

data.drop(['Colorado', 'Ohio'])



#data.drop('two', axis=1)
data.drop(['two', 'four'], axis=1)

obj.drop('c', inplace=True)
obj

"""### Indexing, Selection, and Filtering"""

obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
obj
obj['b']
obj[1]
obj[2:4]
obj[['b', 'a', 'd']]
obj[[1, 3]]
obj[obj < 2]

obj['b':'c']

obj['b':'c'] = 5
obj

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Ohio', 'Colorado', 'Utah', 'New York'],
                    columns=['one', 'two', 'three', 'four'])
data
data['two']
data[['three', 'one']]

data[:2]
data[data['three'] > 5]

data < 5
data[data < 5] = 0
data

"""#### Selection with loc and iloc"""

data.loc['Colorado', ['two', 'three']]

data.iloc[2, [3, 0, 1]]
data.iloc[2]
data.iloc[[1, 2], [3, 0, 1]]

data.loc[:'Utah', 'two']
data.iloc[:, :3][data.three > 5]

"""### Integer Indexes

ser = pd.Series(np.arange(3.))
ser
ser[-1]
"""

import pandas as pd
import numpy as np
ser = pd.Series(np.arange(3.))

ser

ser2 = pd.Series(np.arange(3.), index=['a', 'b', 'c'])
ser2[-1]

ser[:1]
ser.loc[:1]
ser.iloc[:1]

"""### Arithmetic and Data Alignment"""

s1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])
s2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1],
               index=['a', 'c', 'e', 'f', 'g'])
s1
s2

s1 + s2

df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'),
                   index=['Ohio', 'Texas', 'Colorado'])
df2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),
                   index=['Utah', 'Ohio', 'Texas', 'Oregon'])
df1
df2

df1 + df2

df1 = pd.DataFrame({'A': [1, 2]})
df2 = pd.DataFrame({'B': [3, 4]})
df1
df2
df1 - df2

"""#### Arithmetic methods with fill values"""

df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)),
                   columns=list('abcd'))
df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)),
                   columns=list('abcde'))
#df2.loc[1, 'b'] = np.nan
print(df1)
print(df2)

df2.loc[1, 'b'] = np.nan

df2

print(df1)
print(df2)
print(df1 + df2)

df1.add(df2, fill_value=2)

print(1 / df1)
print(df1.rdiv(1))

df1.reindex(columns=df2.columns, fill_value=0)

"""#### Operations between DataFrame and Series"""

arr = np.arange(12.).reshape((3, 4))
arr
arr[0]
arr - arr[0]

frame = pd.DataFrame(np.arange(12.).reshape((4, 3)),
                     columns=list('bde'),
                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])
series = frame.iloc[0]
frame
series

print(frame)
print(series)
print(frame - series)

series2 = pd.Series(range(3), index=['b', 'e', 'f'])
frame + series2

series3 = frame['d']
print(frame)
print(series3)
frame.sub(series3, axis='index')

"""### Function Application and Mapping"""

frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'),
                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])
print(frame)
print(np.abs(frame))

f = lambda x: x.max() - x.min()
print(f)
print(frame)
frame.apply(f)

frame.apply(f, axis='columns')

def f(x):
    return pd.Series([x.min(), x.max()], index=['min', 'max'])
frame.apply(f)

format = lambda x: '%.2f' % x
frame.applymap(format)

frame['e'].map(format)

"""### Sorting and Ranking"""

obj = pd.Series(range(4), index=['d', 'a', 'b', 'c'])
obj.sort_index()

frame = pd.DataFrame(np.arange(8).reshape((2, 4)),
                     index=['three', 'one'],
                     columns=['d', 'a', 'b', 'c'])
print(frame.sort_index())
print(frame.sort_index(axis=1))

frame.sort_index(axis=1, ascending=False)

obj = pd.Series([4, 7, -3, 2])
obj.sort_values()

obj = pd.Series([4, np.nan, 7, np.nan, -3, 2])
obj.sort_values()

frame = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})
frame
frame.sort_values(by='b')

frame.sort_values(by=['a', 'b'])

obj = pd.Series([7, -5, 7, 4, 2, 0, 4])
#1 2  3 4 5 6 7
#7 -5 7 4 2 0 4

#-5 0 2 4 4 7 7
# 7 7 4 4 2 0 -5
#1  2 3 4.5 4.5 6.5 6.5 
obj.rank(ascending= False)

print(obj)
7 -5 7 4 2 0 4

--> -5 0 2 4 4 7 7
--> 1 2 3 4.5 6.5 (Default or method = average)
--> 1 2 3 4 4 6 6 (first)
obj.rank(method='first')

# Assign tie values the maximum rank in the group
obj.rank(ascending=False, method='max')

frame = pd.DataFrame({'b': [4.3, 7, -3, 2], 'a': [0, 1, 0, 1],
                      'c': [-2, 5, 8, -2.5]})
frame
frame.rank(axis='columns')

"""### Axis Indexes with Duplicate Labels"""

obj = pd.Series(range(5), index=['a', 'a', 'b', 'b', 'c'])
obj

obj.index.is_unique

print(obj['a'])
#obj['c']

df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b'])
print(df)
df.loc['b']

"""## Summarizing and Computing Descriptive Statistics"""

df = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],
                   [np.nan, np.nan], [0.75, -1.3]],
                  index=['a', 'b', 'c', 'd'],
                  columns=['one', 'two'])
df

df.sum(axis=1)

df.sum(axis='columns')

df.mean(axis='columns', skipna=False)

print(df)
df.idxmax()

df.cumsum()

df.describe()

obj = pd.Series(['a', 'a', 'b', 'c'] * 4)
obj.describe()

"""### Correlation and Covariance

conda install pandas-datareader
"""

import pandas as pd
price = pd.read_pickle('/content/sample_data/README.md')
volume = pd.read_pickle('/content/sample_data/README.md')

print(price)

"""import pandas_datareader.data as web
all_data = {ticker: web.get_data_yahoo(ticker)
            for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG']}

price = pd.DataFrame({ticker: data['Adj Close']
                     for ticker, data in all_data.items()})
volume = pd.DataFrame({ticker: data['Volume']
                      for ticker, data in all_data.items()})
"""

returns = price.pct_change()
returns.head()

returns['MSFT'].corr(returns['IBM'])
returns['MSFT'].cov(returns['IBM'])

returns.MSFT.corr(returns.IBM)

returns.corr()
returns.cov()

returns.corrwith(returns.IBM)

returns.corrwith(volume)

"""### Unique Values, Value Counts, and Membership"""

obj = pd.Series([c,a,d,a,a,b,b,c,c])
obj

uniques = obj.unique()
uniques

obj.value_counts()

pd.value_counts(obj.values, sort=False)

print(obj)
mask = obj.isin(['b', 'c'])
print(mask)
print(obj[mask])

to_match = pd.Series(['c', 'a', 'b', 'b', 'c', 'a'])
unique_vals = pd.Series(['c', 'b', 'a'])
print(unique_vals)
print(type(unique_vals))
pd.Index(unique_vals).get_indexer(to_match)

data = pd.DataFrame({'Qu1': [1, 3, 4, 3, 4],
                     'Qu2': [2, 3, 1, 2, 3],
                     'Qu3': [1, 5, 2, 4, 4]})
print(data)

pd.value_counts(data.Qu1).reindex(range(1, 6))

data

result = data.apply(pd.value_counts).fillna(10)
result

"""## Conclusion"""

pd.options.display.max_rows = PREVIOUS_MAX_ROWS

import pandas as pd
df =pd.read_csv('/content/drive/MyDrive/Copy of tips.csv')

df.head(n=10)

df=pd.read_table('/content/drive/MyDrive/Copy of tips.csv',delimiter=',')
df